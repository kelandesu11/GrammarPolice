{"ast":null,"code":"import * as i0 from \"@angular/core\";\nimport * as i1 from \"@angular/router\";\nimport * as i2 from \"../data.service\";\nimport * as i3 from \"../services/passivevoice.service\";\nimport * as i4 from \"../services/wordiness.service\";\nimport * as i5 from \"../services/transitions.service\";\nimport * as i6 from \"../services/grammar.service\";\nimport * as i7 from \"../services/eggcorns.service\";\nimport * as i8 from \"../services/academicstyle.service\";\nimport * as i9 from \"../services/nominalizations.service\";\nimport * as i10 from \"../services/sentences.service\";\nimport * as i11 from \"@angular/forms\";\nexport let HomeComponent = /*#__PURE__*/(() => {\n  class HomeComponent {\n    constructor(router, data, passivevoice, wordiness, transitions, grammar, eggcorns, academic, nominalizations, sentences) {\n      this.router = router;\n      this.data = data;\n      this.passivevoice = passivevoice;\n      this.wordiness = wordiness;\n      this.transitions = transitions;\n      this.grammar = grammar;\n      this.eggcorns = eggcorns;\n      this.academic = academic;\n      this.nominalizations = nominalizations;\n      this.sentences = sentences;\n      this.title = 'OverView'; // Wordiness\n\n      this.wordinessFeedback = \" \";\n      this.wordinessAlertColor = \" \"; // Academic Style\n\n      this.academicStyleFeedback = \" \"; // Transitions\n\n      this.transitionsFeedback = \" \"; // Grammar\n\n      this.grammarFeedback = \" \"; // Eggcorns\n\n      this.eggcornsFeedback = \" \";\n      this.sentencesFeedback = ' ';\n    }\n\n    submitClick() {\n      // Reset every time you hit re-highlight\n      this.data.changeTotalSentences(0);\n      this.passivevoice.changePassiveVoiceNumber(0);\n      this.wordiness.changeWordinessNumber(0);\n      this.transitions.changeTotalTransitions(0);\n      this.academic.changeTotalNonAcademic(0);\n      this.grammar.changeTotalGrammar(0);\n      this.eggcorns.changeTotalEggcorns(0);\n      this.nominalizations.changeNominalizationsNumber(0);\n      this.sentences.changeSentencesNumber(0); // this.transitions.resetTransitionFix();\n      // this.grammar.resetGrammarFix();\n      // this.eggcorns.resetEggcornFix();\n      // this.academic.resetAcademicStyleFix();\n      // Clear -- Reset\n\n      this.passiveVoiceUserTable = {\n        find: [],\n        suggestion: []\n      };\n      this.wordinessUserTable = {\n        find: [],\n        suggestion: []\n      };\n      this.transitionsUserTable = {\n        find: [],\n        suggestion: []\n      };\n      this.grammarUserTable = {\n        find: [],\n        suggestion: []\n      };\n      this.eggcornsUserTable = {\n        find: [],\n        suggestion: []\n      };\n      this.academicStyleUserTable = {\n        find: [],\n        suggestion: []\n      };\n      this.nominalizationsUserTable = {\n        find: [],\n        suggestion: []\n      };\n      this.sentencesUserTable = {\n        find: [],\n        suggestion: []\n      }; // variables\n\n      var userText = document.getElementById('userinput').value;\n      let aLetter = false; // This function checks if there is at least one letter inputed\n\n      var validateChar = function () {\n        if (/[a-zA-Z]/.test(userText)) {\n          aLetter = true;\n        }\n      }; // calling function - checker\n\n\n      validateChar(); // alters! or proceed to overview\n\n      if (userText === '') {\n        alert('Please fill out the text area');\n      } else if (aLetter === false) {\n        alert('Please enter at least one letter');\n      } else {\n        this.data.changeMessage(userText);\n        this.router.navigate(['/home/overview']); // Find total sentences in text\n\n        for (let i = 0; i < userText.length; i++) {\n          if (userText.charAt(i) === \".\" || userText.charAt(i) === \"!\" || userText.charAt(i) === \"?\") {\n            this.data.changeTotalSentences(this.totalSentences + 1);\n          }\n        } // fixes\n\n\n        this.passiveVoiceFix(userText);\n        this.wordinessFix(userText);\n        this.transitionsFix(userText);\n        this.grammarFix(userText);\n        this.eggcornsFix(userText);\n        this.academicStyleFix(userText);\n        this.nominalizationsFix(userText);\n        this.sentencesFix(userText); // calculate grade\n\n        this.calculateGrade(); // calculate errors\n\n        this.calculateErrors();\n      }\n    }\n\n    ngOnInit() {\n      this.data.currentMessage.subscribe(message => this.message = message);\n      this.data.currentGrade.subscribe(grade => this.grade = grade);\n      this.data.currentTotalSentences.subscribe(totalSentences => this.totalSentences = totalSentences);\n      this.data.currentTotalErrors.subscribe(totalErrors => this.totalErrors = totalErrors);\n      this.data.currentGradeAlertColor.subscribe(gradeAlertColor => this.gradeAlertColor = gradeAlertColor);\n      this.data.currentGradeFeedback.subscribe(gradeFeedback => this.gradeFeedback = gradeFeedback); // Passive Voice\n\n      this.passiveVoiceService(); // Wordiness\n\n      this.wordinessService(); // Subscribe to Transition Service\n\n      this.transitionsService(); // Academic Style\n\n      this.academicStyleService(); // Grammar\n\n      this.grammarService(); // EggCorns\n\n      this.eggcornsService(); // Nominalizations\n\n      this.nominalizationsService(); // sentences\n\n      this.sentencesService();\n    }\n\n    calculateErrors() {\n      let nErrors = 0;\n      nErrors = this.passiveVoiceNumber + this.wordinessNumber + this.totalNonAcademic + this.totalGrammar + this.nominalizationsNumber + this.sentencesNumber + this.totalEggcorns + this.totalTransitions;\n\n      if (nErrors > 0) {\n        this.totalErrors = \"Potential Problems: \" + nErrors;\n      } else {\n        this.totalErrors = \"Nice! This Writing Looks Pretty Snazzy.\";\n      }\n\n      this.data.changeTotalErrors(this.totalErrors);\n    }\n\n    calculateGrade() {\n      // Because transitions Score is 10% or more, this uses a different formula\n      let tScore = 0;\n\n      if (this.transitionsScore >= 10) {\n        tScore = 0;\n      } else {\n        tScore = 10 - this.transitionsScore;\n      }\n\n      this.grade = 100 - (Math.round(this.passiveVoiceScore / 10 * 10) / 10 + Math.round(this.wordinessScore / 2 * 10) / 10 + Math.round(this.academicStyleScore / 1 * 10) / 10 + Math.round(this.grammarScore / 1 * 10) / 10 + Math.round(this.nominalizationsScore / 6 * 10) / 10 + Math.round(this.sentencesScore / 2 * 10) / 10 + Math.round(this.eggcornsScore / 1 * 10) / 10 + Math.round(tScore * 10) / 10);\n\n      if (this.totalSentences <= 4) {\n        this.grade = 0;\n        this.gradeFeedback = 'You must enter at least 5 sentences to get a grade';\n        this.gradeAlertColor = 'red';\n      } else {\n        if (this.grade < 70) {\n          this.gradeFeedback = 'Your writing seems to have many grammar errors';\n          this.gradeAlertColor = 'red';\n        } else if (this.grade < 80) {\n          this.gradeFeedback = 'Your writing seems to have a lot of grammar errors';\n          this.gradeAlertColor = 'orange';\n        } else if (this.grade < 90) {\n          this.gradeFeedback = 'Good Job! The number of grammar errors seems low';\n          this.gradeAlertColor = 'orange';\n        } else {\n          this.gradeFeedback = 'Great Job!';\n          this.gradeAlertColor = 'green';\n        }\n      }\n\n      this.data.changeGrade(this.grade);\n      this.data.changeGradeAlertColor(this.gradeAlertColor);\n      this.data.changeGradeFeedback(this.gradeFeedback);\n    } // This Function will Calculate the Wordiness Score\n\n\n    wordinessFix(userText) {\n      // tslint:disable-next-line: forin\n      for (const fix in this.wordinessTable) {\n        if (userText.includes(fix)) {\n          this.wordiness.changeWordinessNumber(this.wordinessNumber + 1);\n          this.wordinessUserTable.find.push(\"• \" + fix + \" ⟶ \" + this.wordinessTable[fix]); // this.wordinessUserTable.suggestion.push(\" ⟶ \" + this.wordinessTable[fix]);\n\n          this.wordiness.changeWordinessUserTable(this.wordinessUserTable);\n        }\n      }\n\n      this.wordinessScore = this.wordinessNumber / this.totalSentences * 100;\n\n      if (isNaN(this.wordinessScore) || this.wordinessScore === Infinity) {\n        this.wordinessScore = 0;\n      }\n\n      try {\n        if (this.wordinessScore > 0) {\n          this.wordinessFeedback = \"Your writing seems too wordy. Why use 3 words when you can say it with 1?\";\n          this.wordinessAlertColor = \"red\";\n        } else {\n          this.wordinessFeedback = \"Woohoo! Your writing seems concise, precise, and snappy. George Orwell would be proud.\";\n          this.wordinessAlertColor = \"green\";\n        }\n\n        if (this.totalSentences === 0) {\n          throw new Error(\"\");\n        }\n      } catch (e) {\n        this.wordinessFeedback = \"Make sure you enter at least one sentence.\";\n        this.wordinessAlertColor = \"orange\";\n        this.wordinessScore = 0;\n      }\n\n      this.wordiness.changeWordinessFeedback(this.wordinessFeedback);\n      this.wordiness.changeWordinessScore(Math.round(this.wordinessScore * 10) / 10);\n      this.wordiness.changeWordinessAlertColor(this.wordinessAlertColor);\n    }\n\n    wordinessService() {\n      this.wordiness.currentWordinessNumber.subscribe(wordinessNumber => this.wordinessNumber = wordinessNumber);\n      this.wordiness.currentWordinessTable.subscribe(wordinessTable => this.wordinessTable = wordinessTable);\n      this.wordiness.currentWordinessUserTable.subscribe(wordinessUserTable => this.wordinessUserTable = wordinessUserTable);\n      this.wordiness.currentWordinessAlertColor.subscribe(wordinessAlertColor => this.wordinessAlertColor = wordinessAlertColor);\n      this.wordiness.currentWordinessFeedback.subscribe(wordinessFeedback => this.wordinessFeedback = wordinessFeedback);\n      this.wordiness.currentWordinessScore.subscribe(wordinessScore => this.wordinessScore = wordinessScore);\n    } // This Function will Calculate the Passive Voice Score\n\n\n    passiveVoiceFix(userText) {\n      // tslint:disable-next-line: forin\n      for (const fix in this.passiveVoiceTable) {\n        // tslint:disable-next-line: forin\n        for (const helper in this.passiveVoiceHelperTable) {\n          // String\n          const compareString = helper + fix;\n\n          if (userText.includes(compareString)) {\n            this.passivevoice.changePassiveVoiceNumber(this.passiveVoiceNumber + 1);\n            this.passiveVoiceUserTable.find.push(\"• \" + compareString + \" ⟶ \" + this.passiveVoiceTable[fix]); // this.passiveVoiceUserTable.suggestion.push(\" ⟶ \" + this.passiveVoiceTable[fix]);\n\n            this.passivevoice.changePassiveVoiceUserTable(this.passiveVoiceUserTable);\n          }\n        }\n      }\n\n      this.passiveVoiceScore = this.passiveVoiceNumber / this.totalSentences * 100;\n\n      if (isNaN(this.passiveVoiceScore) || this.passiveVoiceScore === Infinity) {\n        this.passiveVoiceScore = 0;\n      }\n\n      try {\n        if (this.passiveVoiceScore > 0) {\n          this.passiveVoiceFeedback = \"Generally, writing is clearer in active voice.\";\n          this.passiveVoiceAlertColor = \"red\";\n        } else {\n          this.passiveVoiceFeedback = \"Your writing passed the criterion for passive sentences. Congrats!\";\n          this.passiveVoiceAlertColor = \"green\";\n        }\n\n        if (this.totalSentences === 0) {\n          throw new Error(\"\");\n        }\n      } catch (e) {\n        this.passiveVoiceFeedback = \"Make sure you enter at least one sentence.\";\n        this.passiveVoiceAlertColor = \"orange\";\n        this.passiveVoiceScore = 0;\n      }\n\n      this.passivevoice.changePassiveVoiceFeedback(this.passiveVoiceFeedback);\n      this.passivevoice.changePassiveVoiceScore(Math.round(this.passiveVoiceScore * 10) / 10);\n      this.passivevoice.changePassiveVoiceAlertColor(this.passiveVoiceAlertColor);\n    }\n\n    passiveVoiceService() {\n      this.passivevoice.currentPassiveVoiceNumber.subscribe(passiveVoiceNumber => this.passiveVoiceNumber = passiveVoiceNumber);\n      this.passivevoice.currentPassiveVoiceTable.subscribe(passiveVoiceTable => this.passiveVoiceTable = passiveVoiceTable);\n      this.passivevoice.currentPassiveVoiceHelperTable.subscribe(passiveVoiceHelperTable => this.passiveVoiceHelperTable = passiveVoiceHelperTable);\n      this.passivevoice.currentPassiveVoiceUserTable.subscribe(passiveVoiceUserTable => this.passiveVoiceUserTable = passiveVoiceUserTable);\n      this.passivevoice.currentPassiveVoiceAlertColor.subscribe(passiveVoiceAlertColor => this.passiveVoiceAlertColor = passiveVoiceAlertColor);\n      this.passivevoice.currentPassiveVoiceFeedback.subscribe(passiveVoiceFeedback => this.passiveVoiceFeedback = passiveVoiceFeedback);\n      this.passivevoice.currentPassiveVoiceScore.subscribe(passiveVoiceScore => this.passiveVoiceScore = passiveVoiceScore);\n    } // This Function will Calculate the Transition Score\n\n\n    transitionsFix(userText) {\n      for (const fix in this.transitionsTable) {\n        // changing user text to lower Case to match with transitionsTable\n        if (userText.toLocaleLowerCase().includes(fix)) {\n          this.transitions.changeTotalTransitions(this.totalTransitions + 1); // add transition in user text into an array\n\n          this.transitionsUserTable.find.push(\"• \" + fix + \" ⟶ \" + this.transitionsTable[fix]);\n          this.transitions.changeTransitionsUserTable(this.transitionsUserTable); // this.transitionsUserTable.suggestion.push(\" ⟶ \" + this.transitionsTable[fix]);\n        }\n      }\n\n      this.transitionsScore = this.totalTransitions / this.totalSentences * 100;\n\n      if (isNaN(this.transitionsScore) || this.transitionsScore === Infinity) {\n        this.transitionsScore = 0;\n      }\n\n      try {\n        if (this.transitionsScore == 0) {\n          this.transitionsAlertColor = \"red\";\n          this.transitionsFeedback = \"Your writing seems to have no transition word\";\n        } else if (this.transitionsScore <= 10) {\n          this.transitionsFeedback = \"The number of transition words in your writing seems low\";\n          this.transitionsAlertColor = \"red\";\n        } else if (this.transitionsScore <= 80) {\n          this.transitionsFeedback = \"Woot! Your writing seems to have a good proportion of transitions\";\n          this.transitionsAlertColor = \"green\";\n        } else {\n          this.transitionsFeedback = \"Woot! Your writing seems to have a lot of transitions. Make sure you\\'re not overusing transition words\";\n          this.transitionsAlertColor = \"green\";\n        }\n\n        if (this.totalSentences === 0) {\n          throw new Error(\"\");\n        }\n      } catch (e) {\n        this.transitionsFeedback = \"Make sure you enter at least one sentence.\";\n        this.transitionsAlertColor = \"orange\";\n        this.transitionsScore = 0;\n      }\n\n      this.transitions.changeTransitionsScore(Math.round(this.transitionsScore * 10) / 10);\n      this.transitions.changeTransitionsFeedback(this.transitionsFeedback);\n      this.transitions.changeTransitionsAlertColor(this.transitionsAlertColor);\n    }\n\n    transitionsService() {\n      this.transitions.currentTransitionsAlertColor.subscribe(transitionsAlertColor => this.transitionsAlertColor = transitionsAlertColor);\n      this.transitions.currentTransitionsFeedback.subscribe(transitionsFeedback => this.transitionsFeedback = transitionsFeedback);\n      this.transitions.currentTransitionsScore.subscribe(transitionsScore => this.transitionsScore = transitionsScore);\n      this.transitions.currentTotalTransitions.subscribe(totalTransitions => this.totalTransitions = totalTransitions);\n      this.transitions.currentTransitionsTable.subscribe(transitionsTable => this.transitionsTable = transitionsTable);\n      this.transitions.currentTransitionsUserTable.subscribe(transitionsUserTable => this.transitionsUserTable = transitionsUserTable);\n    } // This Function will Calculate the Academic Style Score\n\n\n    academicStyleFix(userText) {\n      //find non academic word in user text\n      for (const fix in this.academicStyleTable) {\n        if (userText.includes(fix)) {\n          this.academic.changeTotalNonAcademic(this.totalNonAcademic + 1);\n          this.academicStyleUserTable.find.push(\"• \" + fix + \" ⟶ \" + this.academicStyleTable[fix]);\n          this.academic.changeAcademicStyleUserTable(this.academicStyleUserTable); // this.academicStyleUserTable.suggestion.push(\"→ \" + this.academicStyleTable[fix]);\n        }\n      }\n\n      let word;\n      word = \"\";\n      var wordCounter = 0; // tslint:disable-next-line: prefer-for-of\n\n      for (let i = 0; i < userText.length; i++) {\n        if (/[a-zA-Z]/.test(userText[i]) || userText[i] === '\\’' || userText[i] === '\\'') {\n          word += userText[i];\n        } else {\n          word = \"\";\n          wordCounter++;\n        }\n      } //calculate academic style score\n\n\n      this.academicStyleScore = this.totalNonAcademic / wordCounter * 100;\n\n      if (isNaN(this.academicStyleScore) || this.academicStyleScore === Infinity) {\n        this.academicStyleScore = 0;\n      }\n\n      try {\n        if (this.academicStyleScore > 0) {\n          this.academicStyleAlertColor = \"red\";\n          this.academicStyleFeedback = \"Your writing may contain language that is either too casual or too extreme for academic discourse.\";\n        } else {\n          this.academicStyleAlertColor = \"green\";\n          this.academicStyleFeedback = \"Your writing has a low percentage of casual and/or extreme language. This makes it more acceptable for academic style.\";\n        }\n\n        if (this.totalSentences === 0) {\n          throw new Error(\"\");\n        }\n      } catch (e) {\n        this.academicStyleFeedback = \"Make sure you enter at least one sentence.\";\n        this.academicStyleAlertColor = \"orange\";\n        this.academicStyleScore = 0;\n      }\n\n      if (isNaN(this.academicStyleScore) || this.academicStyleScore === Infinity) {\n        this.academicStyleScore = 0;\n      }\n\n      this.academic.changeAcademicStyleScore(Math.round(this.academicStyleScore * 10) / 10);\n      this.academic.changeAcademicStyleFeedback(this.academicStyleFeedback);\n      this.academic.changeAcademicStyleAlertColor(this.academicStyleAlertColor);\n    }\n\n    academicStyleService() {\n      this.academic.currentAcademicStyleAlertColor.subscribe(academicStyleAlertColor => this.academicStyleAlertColor = academicStyleAlertColor);\n      this.academic.currentAcademicStyleFeedback.subscribe(academicStyleFeedback => this.academicStyleFeedback = academicStyleFeedback);\n      this.academic.currentAcademicStyleScore.subscribe(academicStyleScore => this.academicStyleScore = academicStyleScore); // this.academic.currentTotalSentences.subscribe(totalSentences => this.totalSentences = totalSentences);\n\n      this.academic.currentTotalNonAcademic.subscribe(totalNonAcademic => this.totalNonAcademic = totalNonAcademic);\n      this.academic.currentAcademicStyleTable.subscribe(academicStyleTable => this.academicStyleTable = academicStyleTable);\n    } // This Function will Calculate the Total Grammar Traps\n\n\n    grammarFix(userText) {\n      for (const fix in this.grammarTable) {\n        if (userText.toLocaleLowerCase().includes(fix)) {\n          this.grammar.changeTotalGrammar(this.totalGrammar + 1);\n          this.grammarUserTable.find.push(\"• \" + fix + \" ⟶ \" + this.grammarTable[fix]); // this.grammarUserTable.suggestion.push(\" ⟶ \" + this.grammarTable[fix]);\n\n          this.grammar.changeGrammarUserTable(this.grammarUserTable);\n        }\n      }\n\n      this.grammarScore = this.totalGrammar / this.totalSentences * 100;\n\n      if (isNaN(this.grammarScore) || this.grammarScore === Infinity) {\n        this.grammarScore = 0;\n      }\n\n      try {\n        if (this.grammarScore == 0) {\n          this.grammarAlertColor = \"green\";\n          this.grammarFeedback = \"Woohoo! We didn't find any obvious grammark errors. However, \" + \"beware: Grammark does not check for fragments, comma splices, subject-verb errors, \" + \"number and pronoun problems. What's the best way to find grammar errors? Read your writing aloud.\";\n        } else if (this.grammarScore > 0) {\n          this.grammarAlertColor = \"red\";\n          this.grammarFeedback = \"Your writing includes words or phrases usually considered to be grammar errors\";\n        }\n\n        if (this.totalSentences === 0) {\n          throw new Error(\"\");\n        }\n      } catch (e) {\n        this.grammarFeedback = \"Make sure you enter at least one sentence.\";\n        this.grammarAlertColor = \"orange\";\n        this.grammarScore = 0;\n      }\n\n      this.grammar.changeGrammarScore(Math.round(this.grammarScore * 10) / 10);\n      this.grammar.changeGrammarFeedback(this.grammarFeedback);\n      this.grammar.changeGrammarAlertColor(this.grammarAlertColor);\n    }\n\n    grammarService() {\n      this.grammar.currentGrammarAlertColor.subscribe(grammarAlertColor => this.grammarAlertColor = grammarAlertColor);\n      this.grammar.currentGrammarFeedback.subscribe(grammarFeedback => this.grammarFeedback = grammarFeedback);\n      this.grammar.currentTotalGrammar.subscribe(totalGrammar => this.totalGrammar = totalGrammar);\n      this.grammar.currentGrammarTable.subscribe(grammarTable => this.grammarTable = grammarTable);\n      this.grammar.currentGrammarUserTable.subscribe(grammarUserTable => this.grammarUserTable = grammarUserTable);\n      this.grammar.currentGrammarScore.subscribe(grammarScore => this.grammarScore = grammarScore);\n    } // This Function will Calculate the Eggcorn Score\n\n\n    eggcornsFix(userText) {\n      for (const fix in this.eggcornsTable) {\n        if (userText.toLocaleLowerCase().includes(fix)) {\n          this.eggcorns.changeTotalEggcorns(this.totalEggcorns + 1);\n          this.eggcornsUserTable.find.push(\"• \" + fix + \" ⟶ \" + this.eggcornsTable[fix]); // this.eggcornsUserTable.suggestion.push(\" ⟶ \" + this.eggcornsTable[fix]);\n\n          this.eggcorns.changeEggcornsUserTable(this.eggcornsUserTable);\n        }\n      }\n\n      this.eggcornsScore = this.totalEggcorns / this.totalSentences * 100;\n\n      if (isNaN(this.eggcornsScore) || this.eggcornsScore === Infinity) {\n        this.eggcornsScore = 0;\n      }\n\n      try {\n        if (this.eggcornsScore == 0) {\n          this.eggcornsAlertColor = \"green\";\n          this.eggcornsFeedback = \"Great job Your writing seems to have no Eggcorns.\";\n        } else if (this.eggcornsScore <= 5) {\n          this.eggcornsFeedback = \"Almost there! The number of Eggcorns words in your writing seems low.\";\n          this.eggcornsAlertColor = \"red\";\n        } else if (this.eggcornsScore <= 10) {\n          this.eggcornsFeedback = \"Your writing seems to have a lot of eggcorns.\";\n          this.eggcornsAlertColor = \"red\";\n        } else {\n          this.eggcornsFeedback = \"Your writing seems to have many eggcorns. Make sure you\\'re not using eggcorns.\";\n          this.eggcornsAlertColor = \"red\";\n        }\n\n        if (this.totalSentences === 0) {\n          throw new Error(\"\");\n        }\n      } catch (e) {\n        this.eggcornsFeedback = \"Make sure you enter at least one sentence.\";\n        this.eggcornsAlertColor = \"orange\";\n        this.eggcornsScore = 0;\n      }\n\n      this.eggcorns.changeEggcornsScore(Math.round(this.eggcornsScore * 10) / 10);\n      this.eggcorns.changeEggcornsFeedback(this.eggcornsFeedback);\n      this.eggcorns.changeEggcornsAlertColor(this.eggcornsAlertColor);\n    }\n\n    eggcornsService() {\n      this.eggcorns.currentEggcornsAlertColor.subscribe(eggcornsAlertColor => this.eggcornsAlertColor = eggcornsAlertColor);\n      this.eggcorns.currentEggcornsFeedback.subscribe(eggcornsFeedback => this.eggcornsFeedback = eggcornsFeedback);\n      this.eggcorns.currentEggcornsScore.subscribe(eggcornsScore => this.eggcornsScore = eggcornsScore); // this.eggcorns.currentTotalSentences.subscribe(totalSentences => this.totalSentences = totalSentences);\n\n      this.eggcorns.currentTotalEggcorns.subscribe(totalEggcorns => this.totalEggcorns = totalEggcorns);\n      this.eggcorns.currentEggcornsTable.subscribe(eggcornsTable => this.eggcornsTable = eggcornsTable);\n      this.eggcorns.currentEggcornsUserTable.subscribe(eggcornsUserTable => this.eggcornsUserTable = eggcornsUserTable);\n    }\n\n    nominalizationsFix(userText) {\n      let word;\n      word = \"\";\n      let wordCounter = 0; // tslint:disable-next-line: prefer-for-of\n\n      for (let i = 0; i < userText.length; i++) {\n        if (/[a-zA-Z]/.test(userText[i]) || userText[i] === '\\’' || userText[i] === '\\'') {\n          word += userText[i];\n        } else {\n          for (const fix in this.nominalizationsTable) {\n            if (word.length > 7 && word.includes(fix)) {\n              this.nominalizationsUserTable.find.push(\"• \" + word + ' ⟶ ' + this.nominalizationsTable[fix]);\n              this.nominalizations.changeNominalizationsNumber(this.nominalizationsNumber + 1);\n              this.nominalizations.changeNominalizationsUserTable(this.nominalizationsUserTable);\n            }\n          }\n\n          word = \"\";\n          wordCounter++;\n        }\n      }\n\n      this.nominalizationsScore = this.nominalizationsNumber / wordCounter * 100;\n\n      if (isNaN(this.nominalizationsScore) || this.nominalizationsScore === Infinity) {\n        this.nominalizationsScore = 0;\n      }\n\n      try {\n        if (this.nominalizationsScore <= 6) {\n          this.nominalizationsFeedback = \"Rock on. Your writing has a reasonable number of \\\"nominalized\\\" word forms, highlighted below. You probably don't need to reduce these any further.\";\n          this.nominalizationsAlertColor = \"green\";\n        } else {\n          this.nominalizationsFeedback = \"Most of the words below are perfectly acceptable. However, you use many of these \\\"nominalized\\\" (non root-form) words. They bog down writing and decrease readability.\";\n          this.nominalizationsAlertColor = \"red\";\n        }\n\n        if (this.totalSentences === 0) {\n          throw new Error(\"\");\n        }\n      } catch (e) {\n        this.nominalizationsFeedback = \"Make sure you enter at least one sentence.\";\n        this.nominalizationsAlertColor = \"orange\";\n        this.nominalizationsScore = 0;\n      }\n\n      this.nominalizations.changeNominalizationsFeedback(this.nominalizationsFeedback);\n      this.nominalizations.changeNominalizationsScore(Math.round(this.nominalizationsScore * 10) / 10);\n      this.nominalizations.changeNominalizationsAlertColor(this.nominalizationsAlertColor);\n    }\n\n    nominalizationsService() {\n      this.nominalizations.currentNominalizationsAlertColor.subscribe(nominalizationsAlertColor => this.nominalizationsAlertColor = nominalizationsAlertColor);\n      this.nominalizations.currentNominalizationsFeedback.subscribe(nominalizationsFeedback => this.nominalizationsFeedback = nominalizationsFeedback);\n      this.nominalizations.currentNominalizationsScore.subscribe(nominalizationsScore => this.nominalizationsScore = nominalizationsScore);\n      this.nominalizations.currentNominalizationsNumber.subscribe(nominalizationsNumber => this.nominalizationsNumber = nominalizationsNumber);\n      this.nominalizations.currentNominalizationsUserTable.subscribe(nominalizationsUserTable => this.nominalizationsUserTable = nominalizationsUserTable);\n      this.nominalizations.currentNominalizationsTable.subscribe(nominalizationsTable => this.nominalizationsTable = nominalizationsTable);\n    }\n\n    sentencesFix(userText) {\n      let word;\n      word = '';\n      let sentence;\n      sentence = '';\n      let sentence2;\n      sentence2 = '';\n      let errorFound = false;\n      let wordCounter = 0; // tslint:disable-next-line: prefer-for-of\n\n      for (let i = 0; i < userText.length; i++) {\n        if (/[a-zA-Z]/.test(userText[i]) || userText[i] === '\\’' || userText[i] === '\\'') {\n          word += userText[i];\n        } else {\n          for (const fix in this.sentencesTable) {\n            if (word.includes(fix)) {\n              sentence += word;\n              errorFound = true;\n            }\n          }\n\n          word = '';\n          wordCounter++;\n        } // Sentence Fragment\n\n\n        if (errorFound === true) {\n          if (/[a-zA-Z]/.test(userText[i]) || userText[i] === '\\’' || userText[i] === '\\'' || userText[i] === ' ') {\n            sentence += userText[i];\n          } else {\n            this.sentences.changeSentencesNumber(this.sentencesNumber + 1);\n            this.sentencesUserTable.find.push(\"• Potential Fragment → \\\"\" + sentence + \"...\\\"\");\n            this.sentences.changeSentencesUserTable(this.sentencesUserTable);\n            errorFound = false;\n            sentence = '';\n          }\n        } // Sentence length\n\n\n        if (userText[i] === '!' || userText[i] === '?' || userText[i] === '.') {\n          if (wordCounter > 50) {\n            this.sentences.changeSentencesNumber(this.sentencesNumber + 1);\n            this.sentencesUserTable.find.push(\"• Long Sentence → \\\"\" + sentence2 + \"...\\\"\");\n            this.sentences.changeSentencesUserTable(this.sentencesUserTable);\n          }\n\n          sentence2 = '';\n          wordCounter = 0;\n        } else {\n          sentence2 += userText[i];\n        }\n      }\n\n      this.sentencesScore = this.sentencesNumber / this.totalSentences * 100;\n\n      if (this.sentencesScore === NaN || this.sentencesScore === Infinity) {\n        this.sentencesScore = 0;\n      }\n\n      try {\n        if (this.sentencesScore > 0) {\n          this.sentencesFeedback = \"Hmmm. Your writing may have some sentence-level issues. Check the list below for potential fragments or run-ons.\";\n          this.sentencesAlertColor = \"red\";\n        } else {\n          this.sentencesFeedback = \"Bueno! Your sentences don't show any glaring errors.\";\n          this.sentencesAlertColor = \"green\";\n        }\n\n        if (this.totalSentences === 0) {\n          throw new Error(\"\");\n        }\n      } catch (e) {\n        this.sentencesFeedback = \"Make sure you enter at least one sentence.\";\n        this.sentencesAlertColor = \"orange\";\n        this.sentencesScore = 0;\n      }\n\n      this.sentences.changeSentencesFeedback(this.sentencesFeedback);\n      this.sentences.changeSentencesScore(Math.round(this.sentencesScore * 10) / 10);\n      this.sentences.changeSentencesAlertColor(this.sentencesAlertColor);\n    }\n\n    sentencesService() {\n      this.sentences.currentSentencesNumber.subscribe(sentencesNumber => this.sentencesNumber = sentencesNumber);\n      this.sentences.currentSentencesTable.subscribe(sentencesTable => this.sentencesTable = sentencesTable);\n      this.sentences.currentSentencesUserTable.subscribe(sentencesUserTable => this.sentencesUserTable = sentencesUserTable);\n      this.sentences.currentSentencesAlertColor.subscribe(sentencesAlertColor => this.sentencesAlertColor = sentencesAlertColor);\n      this.sentences.currentSentencesFeedback.subscribe(sentencesFeedback => this.sentencesFeedback = sentencesFeedback);\n      this.sentences.currentSentencesScore.subscribe(sentencesScore => this.sentencesScore = sentencesScore);\n    }\n\n  }\n\n  HomeComponent.ɵfac = function HomeComponent_Factory(t) {\n    return new (t || HomeComponent)(i0.ɵɵdirectiveInject(i1.Router), i0.ɵɵdirectiveInject(i2.DataService), i0.ɵɵdirectiveInject(i3.PassivevoiceService), i0.ɵɵdirectiveInject(i4.WordinessService), i0.ɵɵdirectiveInject(i5.TransitionsService), i0.ɵɵdirectiveInject(i6.GrammarService), i0.ɵɵdirectiveInject(i7.EggcornService), i0.ɵɵdirectiveInject(i8.AcademicStyleService), i0.ɵɵdirectiveInject(i9.NominalizationsService), i0.ɵɵdirectiveInject(i10.SentencesService));\n  };\n\n  HomeComponent.ɵcmp = /*@__PURE__*/i0.ɵɵdefineComponent({\n    type: HomeComponent,\n    selectors: [[\"app-home\"]],\n    decls: 28,\n    vars: 2,\n    consts: [[\"id\", \"textboxBackground\"], [1, \"column\"], [\"id\", \"grammarChecker\"], [\"id\", \"grammarDescription\"], [\"id\", \"userinput\", \"name\", \"userinput\", \"placeholder\", \"Type or paste your writing here. It will not be stored or reused in any way.\", 3, \"ngModel\", \"ngModelChange\"], [\"id\", \"submitbutton\", 3, \"click\"], [\"id\", \"attentionGrabber\"], [1, \"column1\"], [1, \"homedescription\"]],\n    template: function HomeComponent_Template(rf, ctx) {\n      if (rf & 1) {\n        i0.ɵɵelementStart(0, \"body\");\n        i0.ɵɵelementStart(1, \"div\", 0);\n        i0.ɵɵelementStart(2, \"div\", 1);\n        i0.ɵɵelementStart(3, \"h1\", 2);\n        i0.ɵɵtext(4, \"Grammar Checker\");\n        i0.ɵɵelementEnd();\n        i0.ɵɵelementStart(5, \"h3\", 3);\n        i0.ɵɵtext(6, \"Check your text for any potential errors\");\n        i0.ɵɵelementEnd();\n        i0.ɵɵelementStart(7, \"textarea\", 4);\n        i0.ɵɵlistener(\"ngModelChange\", function HomeComponent_Template_textarea_ngModelChange_7_listener($event) {\n          return ctx.message = $event;\n        });\n        i0.ɵɵtext(8);\n        i0.ɵɵelementEnd();\n        i0.ɵɵelement(9, \"br\");\n        i0.ɵɵelement(10, \"br\");\n        i0.ɵɵelementStart(11, \"button\", 5);\n        i0.ɵɵlistener(\"click\", function HomeComponent_Template_button_click_11_listener() {\n          return ctx.submitClick();\n        });\n        i0.ɵɵtext(12, \"SUBMIT\");\n        i0.ɵɵelementEnd();\n        i0.ɵɵelementEnd();\n        i0.ɵɵelement(13, \"br\");\n        i0.ɵɵelementStart(14, \"h1\", 6);\n        i0.ɵɵtext(15, \"HOW IS GRAMMARK HELPFUL?\");\n        i0.ɵɵelementEnd();\n        i0.ɵɵelementStart(16, \"div\", 7);\n        i0.ɵɵelementStart(17, \"div\", 8);\n        i0.ɵɵelementStart(18, \"h3\");\n        i0.ɵɵtext(19, \"It takes a teacher \");\n        i0.ɵɵelementStart(20, \"b\");\n        i0.ɵɵtext(21, \"15-30 minutes\");\n        i0.ɵɵelementEnd();\n        i0.ɵɵtext(22, \" to correct 1 paper\");\n        i0.ɵɵelementEnd();\n        i0.ɵɵelementStart(23, \"h3\");\n        i0.ɵɵtext(24, \"It takes Grammark \");\n        i0.ɵɵelementStart(25, \"b\");\n        i0.ɵɵtext(26, \"0.14 seconds\");\n        i0.ɵɵelementEnd();\n        i0.ɵɵtext(27, \" to locate 6,239 errors\");\n        i0.ɵɵelementEnd();\n        i0.ɵɵelementEnd();\n        i0.ɵɵelementEnd();\n        i0.ɵɵelementEnd();\n        i0.ɵɵelementEnd();\n      }\n\n      if (rf & 2) {\n        i0.ɵɵadvance(7);\n        i0.ɵɵproperty(\"ngModel\", ctx.message);\n        i0.ɵɵadvance(1);\n        i0.ɵɵtextInterpolate(ctx.message);\n      }\n    },\n    directives: [i11.DefaultValueAccessor, i11.NgControlStatus, i11.NgModel],\n    styles: [\"@import\\\"https://fonts.googleapis.com/css2?family=Work+Sans&display=swap\\\";body[_ngcontent-%COMP%]{background-image:linear-gradient(#F3FFF6,#2F6E4D);font-family:\\\"Work Sans\\\",sans-serif}.column[_ngcontent-%COMP%]{width:50%;margin-left:auto;margin-right:auto}#grammarChecker[_ngcontent-%COMP%]{text-align:center;line-height:.1;color:#2f6e4d;font-family:Futura,Trebuchet MS,Arial,sans-serif}#grammarDescription[_ngcontent-%COMP%]{text-align:center;line-height:1;color:#6e8c7c;font-family:Futura,Trebuchet MS,Arial,sans-serif}#textboxBackground[_ngcontent-%COMP%]{width:100%;background:url(backgroundgradient.jpg);margin-top:0%;background-position:center;background-repeat:no-repeat;background-size:cover;background-attachment:fixed;padding-top:35px;padding-bottom:50px}#attentionGrabber[_ngcontent-%COMP%]{font-size:20px;font-weight:500;color:#2f6e4d;-webkit-text-stroke-width:.25px;text-align:left;margin-bottom:10px;padding-left:7px;font-family:Futura,Trebuchet MS,Arial,sans-serif}.column2[_ngcontent-%COMP%]{float:left;width:300px;padding-right:20px}.c2[_ngcontent-%COMP%]{background-color:#b1b1bd;border-color:#000;border:groove;padding-left:20px;margin-bottom:19px}.c2[_ngcontent-%COMP%]   h2[_ngcontent-%COMP%]{padding-top:10px;margin-bottom:5px}.c2[_ngcontent-%COMP%]   ul[_ngcontent-%COMP%]{padding-bottom:10px}.c2[_ngcontent-%COMP%]   ul[_ngcontent-%COMP%]   li[_ngcontent-%COMP%]{padding-bottom:5px}.homecolumns[_ngcontent-%COMP%]{padding:20px}.homedescription[_ngcontent-%COMP%]{color:#2f6e4d;text-align:left;font-family:Futura,Trebuchet MS,Arial,sans-serif}.homedescription[_ngcontent-%COMP%]   h3[_ngcontent-%COMP%]{font-size:15px;line-height:.5;padding-left:7px;font-family:Futura,Trebuchet MS,Arial,sans-serif}#userinput[_ngcontent-%COMP%]{height:400px;min-height:100px;width:95%;resize:none;border-width:1.5px;padding:15px;font-size:14px;border-color:#c6dbd0;border-radius:23px;font-family:Futura,Trebuchet MS,Arial,sans-serif}[_ngcontent-%COMP%]::placeholder{color:#adadad}#submitbutton[_ngcontent-%COMP%]{background-color:#2f6e4d;color:#fff;width:250px;height:60px;font-size:25px;font-family:Futura,Trebuchet MS,Arial,sans-serif;margin-left:35%;display:table-cell;vertical-align:middle;border-radius:23px;border:none}#submitbutton[_ngcontent-%COMP%]:hover{background-color:#adadad;color:#2f6e4d;cursor:pointer}ul[_ngcontent-%COMP%]{padding-left:20px;font-size:20px}.selfimage[_ngcontent-%COMP%]{padding-top:15px;padding-bottom:15px}#adminControls[_ngcontent-%COMP%]{text-align:right;padding-top:5px;padding-bottom:5px;border-top:2px solid black}.mat-stroked-button.mat-primary[_ngcontent-%COMP%]{background:#00704a;color:#000;display:inline-block;width:135px;font-size:20px;text-align:center;border-radius:10px;border-color:#000;border-width:2px;margin-right:10px}.mat-stroked-button.mat-primary[_ngcontent-%COMP%]:hover{background:#409e7f;color:#fff;border-radius:10px}\"]\n  });\n  return HomeComponent;\n})();","map":null,"metadata":{},"sourceType":"module"}