{"ast":null,"code":"import { __decorate } from \"tslib\";\nimport { Component } from '@angular/core';\nimport { UntypedFormGroup, UntypedFormControl, Validators } from '@angular/forms';\nlet DashboardComponent = class DashboardComponent {\n  constructor(router, data, passivevoice, wordiness, transitions, grammar, eggcorns, academic, nominalizations, firestore) {\n    this.router = router;\n    this.data = data;\n    this.passivevoice = passivevoice;\n    this.wordiness = wordiness;\n    this.transitions = transitions;\n    this.grammar = grammar;\n    this.eggcorns = eggcorns;\n    this.academic = academic;\n    this.nominalizations = nominalizations;\n    this.firestore = firestore;\n  }\n\n  ngOnInit() {\n    this.ruleCards = [];\n    this.addRule = new UntypedFormGroup({\n      'rule': new UntypedFormControl('', Validators.required),\n      'fix': new UntypedFormControl('', Validators.required)\n    });\n    this.academic.currentAcademicStyleTable.subscribe(academicStyleTable => this.academicStyleTable = academicStyleTable);\n    this.wordiness.currentWordinessTable.subscribe(wordinessTable => this.wordinessTable = wordinessTable);\n    this.transitions.currentTransitionsTable.subscribe(transitionsTable => this.transitionsTable = transitionsTable);\n    this.passivevoice.currentPassiveVoiceTable.subscribe(passiveVoiceTable => this.passiveVoiceTable = passiveVoiceTable);\n    this.passivevoice.currentPassiveVoiceHelperTable.subscribe(passiveVoiceHelperTable => this.passiveVoiceHelperTable = passiveVoiceHelperTable);\n    this.grammar.currentGrammarTable.subscribe(grammarTable => this.grammarTable = grammarTable);\n    this.eggcorns.currentEggcornsTable.subscribe(eggcornsTable => this.eggcornsTable = eggcornsTable);\n    this.nominalizations.currentNominalizationsTable.subscribe(nominalizationsTable => this.nominalizationsTable = nominalizationsTable);\n  }\n\n  academicLoad() {\n    this.activeTable = 'academicstyle';\n    this.ruleCards = [];\n\n    for (const fix in this.academicStyleTable.__zone_symbol__value) {\n      this.ruleCards.push({\n        rule: fix,\n        suggestion: this.academicStyleTable.__zone_symbol__value[fix]\n      });\n    }\n  }\n\n  grammarLoad() {\n    this.activeTable = 'grammar';\n    this.ruleCards = [];\n\n    for (const fix in this.grammarTable.__zone_symbol__value) {\n      this.ruleCards.push({\n        rule: fix,\n        suggestion: this.grammarTable.__zone_symbol__value[fix]\n      });\n    }\n  }\n\n  nominalizationsLoad() {\n    this.activeTable = 'norminlizations';\n    this.ruleCards = [];\n\n    for (const fix in this.nominalizationsTable.__zone_symbol__value) {\n      this.ruleCards.push({\n        rule: fix,\n        suggestion: this.nominalizationsTable.__zone_symbol__value[fix]\n      });\n    }\n  }\n\n  eggcornsLoad() {\n    this.activeTable = 'eggcorns';\n    this.ruleCards = [];\n\n    for (const fix in this.eggcornsTable.__zone_symbol__value) {\n      this.ruleCards.push({\n        rule: fix,\n        suggestion: this.eggcornsTable.__zone_symbol__value[fix]\n      });\n    }\n  }\n\n  wordinessLoad() {\n    this.activeTable = 'wordiness';\n    this.ruleCards = [];\n\n    for (const fix in this.wordinessTable.__zone_symbol__value) {\n      this.ruleCards.push({\n        rule: fix,\n        suggestion: this.wordinessTable.__zone_symbol__value[fix]\n      });\n    }\n  }\n\n  transitionsLoad() {\n    this.activeTable = 'transitions';\n    this.ruleCards = [];\n\n    for (const fix in this.transitionsTable.__zone_symbol__value) {\n      this.ruleCards.push({\n        rule: fix,\n        suggestion: this.transitionsTable.__zone_symbol__value[fix]\n      });\n    }\n  }\n\n  passiveLoad() {\n    this.activeTable = 'passivevoice';\n    this.ruleCards = [];\n\n    for (const fix in this.passiveVoiceTable.__zone_symbol__value) {\n      this.ruleCards.push({\n        rule: fix,\n        suggestion: this.passiveVoiceTable.__zone_symbol__value[fix]\n      });\n    }\n  }\n\n  add() {\n    this.ruleCards.push({\n      rule: this.addRule.get('rule').value,\n      suggestion: this.addRule.get('fix').value\n    });\n    this.firestore.collection(this.activeTable).add({\n      fixed: this.addRule.get('fix').value,\n      wrong: this.addRule.get('rule').value\n    });\n\n    if (this.activeTable == 'academic') {//insert method to add to academicStyleTable\n    }\n\n    this.addRule.reset();\n  }\n\n  delete(rule) {\n    let deleteArray = [];\n    const index = this.ruleCards.indexOf(rule, 0);\n    this.ruleCards.splice(index, 1);\n    this.firestore.collection(this.activeTable, ref => ref.where(\"wrong\", \"==\", rule.rule).where(\"fixed\", \"==\", rule.suggestion)).get().subscribe(ss => {\n      ss.docs.forEach(doc => {\n        doc.ref.delete();\n      });\n    });\n  }\n\n};\nDashboardComponent = __decorate([Component({\n  selector: 'app-dashboard',\n  templateUrl: './dashboard.component.html',\n  styleUrls: ['./dashboard.component.css']\n})], DashboardComponent);\nexport { DashboardComponent };","map":null,"metadata":{},"sourceType":"module"}