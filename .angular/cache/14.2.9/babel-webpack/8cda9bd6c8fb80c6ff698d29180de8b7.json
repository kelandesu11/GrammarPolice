{"ast":null,"code":"import { __awaiter } from \"tslib\"; // firebase\n\nimport { initializeApp } from 'firebase/app';\nimport { getFirestore, collection, query, getDocs } from 'firebase/firestore/lite';\nimport \"firebase/compat/firestore\";\nimport * as i0 from \"@angular/core\"; // Your web app's Firebase configuration\n// For Firebase JS SDK v7.20.0 and later, measurementId is optional\n\nexport let FirebaseService = /*#__PURE__*/(() => {\n  class FirebaseService {\n    constructor() {\n      this.firebaseConfig = {\n        apiKey: \"AIzaSyCSYHn4OMZfXeoW0TEFTqnwgwuS_I0FqCI\",\n        authDomain: \"gramulardatabase.firebaseapp.com\",\n        databaseURL: \"https://gramulardatabase-default-rtdb.firebaseio.com\",\n        projectId: \"gramulardatabase\",\n        storageBucket: \"gramulardatabase.appspot.com\",\n        messagingSenderId: \"765198495430\",\n        appId: \"1:765198495430:web:c54cd6006c9b84307031c7\",\n        measurementId: \"G-KGM1GEWG1T\"\n      };\n      this.app = initializeApp(this.firebaseConfig);\n      this.db = getFirestore(this.app);\n    }\n\n    static getAcademicStyles() {\n      throw new Error('Method not implemented.');\n    } // get academic styling\n\n\n    getAcademicStyles() {\n      return __awaiter(this, void 0, void 0, function* () {\n        let getAcademicJson = {};\n        const q = query(collection(this.db, \"academicstyle\"));\n        const querySnapshot = yield getDocs(q);\n        querySnapshot.forEach(doc => {\n          // doc.data() is never undefined for query doc snapshot\n          // print the firestore values in the academicstyle\n          var wrong = doc.data().wrong;\n          var fixed = doc.data().fixed;\n          getAcademicJson[wrong] = fixed;\n        });\n        return getAcademicJson;\n      });\n    } // get eggcorns\n\n\n    getEggcorns() {\n      return __awaiter(this, void 0, void 0, function* () {\n        let getEggcornsJson = {};\n        const q = query(collection(this.db, \"eggcorns\"));\n        const querySnapshot = yield getDocs(q);\n        querySnapshot.forEach(doc => {\n          // doc.data() is never undefined for query doc snapshot\n          // print the firestore values in the academicstyle\n          var wrong = doc.data().wrong;\n          var fixed = doc.data().fixed;\n          getEggcornsJson[wrong] = fixed;\n        });\n        return getEggcornsJson;\n      });\n    } // get\n\n\n    getGrammar() {\n      return __awaiter(this, void 0, void 0, function* () {\n        let getGrammarJson = {};\n        const q = query(collection(this.db, \"grammar\"));\n        const querySnapshot = yield getDocs(q);\n        querySnapshot.forEach(doc => {\n          // doc.data() is never undefined for query doc snapshot\n          // print the firestore values in the academicstyle\n          var wrong = doc.data().wrong;\n          var fixed = doc.data().fixed;\n          getGrammarJson[wrong] = fixed;\n        });\n        return getGrammarJson;\n      });\n    } // get norminlizations\n\n\n    getNorminlizations() {\n      return __awaiter(this, void 0, void 0, function* () {\n        let getNorminlizationsJson = {};\n        const q = query(collection(this.db, \"norminlizations\"));\n        const querySnapshot = yield getDocs(q);\n        querySnapshot.forEach(doc => {\n          // doc.data() is never undefined for query doc snapshot\n          // print the firestore values in the academicstyle\n          var wrong = doc.data().wrong;\n          var fixed = doc.data().fixed;\n          getNorminlizationsJson[wrong] = fixed;\n        });\n        return getNorminlizationsJson;\n      });\n    } // get passive voice\n\n\n    getPassiveVoice() {\n      return __awaiter(this, void 0, void 0, function* () {\n        let getPassiveVoiceJson = {};\n        const q = query(collection(this.db, \"passivevoice\"));\n        const querySnapshot = yield getDocs(q);\n        querySnapshot.forEach(doc => {\n          // doc.data() is never undefined for query doc snapshot\n          // print the firestore values in the academicstyle\n          var wrong = doc.data().wrong;\n          var fixed = doc.data().fixed;\n          getPassiveVoiceJson[wrong] = fixed;\n        });\n        return getPassiveVoiceJson;\n      });\n    } // get transitions\n\n\n    getTransitions() {\n      return __awaiter(this, void 0, void 0, function* () {\n        let getTransitonsJson = {};\n        const q = query(collection(this.db, \"transitions\"));\n        const querySnapshot = yield getDocs(q);\n        querySnapshot.forEach(doc => {\n          // doc.data() is never undefined for query doc snapshot\n          // print the firestore values in the academicstyle\n          var wrong = doc.data().wrong;\n          var fixed = doc.data().fixed;\n          getTransitonsJson[wrong] = fixed;\n        });\n        return getTransitonsJson;\n      });\n    } // get wordiness\n\n\n    getWordiness() {\n      return __awaiter(this, void 0, void 0, function* () {\n        let getWordinessJson = {};\n        const q = query(collection(this.db, \"wordiness\"));\n        const querySnapshot = yield getDocs(q);\n        querySnapshot.forEach(doc => {\n          // doc.data() is never undefined for query doc snapshot\n          // print the firestore values in the academicstyle\n          var wrong = doc.data().wrong;\n          var fixed = doc.data().fixed;\n          getWordinessJson[wrong] = fixed;\n        });\n        return getWordinessJson;\n      });\n    }\n\n  }\n\n  FirebaseService.ɵfac = function FirebaseService_Factory(t) {\n    return new (t || FirebaseService)();\n  };\n\n  FirebaseService.ɵprov = /*@__PURE__*/i0.ɵɵdefineInjectable({\n    token: FirebaseService,\n    factory: FirebaseService.ɵfac,\n    providedIn: 'root'\n  });\n  return FirebaseService;\n})();","map":null,"metadata":{},"sourceType":"module"}