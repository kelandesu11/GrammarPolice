{"ast":null,"code":"import { BehaviorSubject } from 'rxjs/internal/BehaviorSubject';\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"src/firefireStore.service\";\nexport let TransitionsService = /*#__PURE__*/(() => {\n  class TransitionsService {\n    constructor(testFireBase) {\n      this.testFireBase = testFireBase; //variables for transistions score\n\n      this.transitionsAlertColor = new BehaviorSubject(\" \");\n      this.currentTransitionsAlertColor = this.transitionsAlertColor.asObservable();\n      this.transitionsFeedback = new BehaviorSubject(\" \");\n      this.currentTransitionsFeedback = this.transitionsFeedback.asObservable();\n      this.transitionsScore = new BehaviorSubject(0);\n      this.currentTransitionsScore = this.transitionsScore.asObservable(); //private totalSentences = new BehaviorSubject<number>(0);\n      //currentTotalSentences = this.totalSentences.asObservable();\n\n      this.totalTransitions = new BehaviorSubject(0);\n      this.currentTotalTransitions = this.totalTransitions.asObservable(); //this table contains all of the transition words\n\n      this.transitionsTable = new BehaviorSubject(this.testFireBase.getTransitions());\n      this.currentTransitionsTable = this.transitionsTable.asObservable(); // this table will contain the user's transition words\n\n      this.transitionsUserTable = new BehaviorSubject({});\n      this.currentTransitionsUserTable = this.transitionsUserTable.asObservable();\n    }\n\n    changeTransitionsScore(transitionsScore) {\n      this.transitionsScore.next(transitionsScore);\n    } //changeTotalSentences(totalSentences: number) {\n    //  this.totalSentences.next(totalSentences);\n    //}\n\n\n    changeTotalTransitions(totalTransitions) {\n      this.totalTransitions.next(totalTransitions);\n    }\n\n    changeTable(table) {\n      this.transitionsTable.next(table);\n    }\n\n    changeTransitionsUserTable(transitionsUserTable) {\n      this.transitionsUserTable.next(transitionsUserTable);\n    }\n\n    changeTransitionsFeedback(transitionsFeedback) {\n      this.transitionsFeedback.next(transitionsFeedback);\n    }\n\n    changeTransitionsAlertColor(transitionsAlertColor) {\n      this.transitionsAlertColor.next(transitionsAlertColor);\n    }\n\n  }\n\n  TransitionsService.ɵfac = function TransitionsService_Factory(t) {\n    return new (t || TransitionsService)(i0.ɵɵinject(i1.FirebaseService));\n  };\n\n  TransitionsService.ɵprov = /*@__PURE__*/i0.ɵɵdefineInjectable({\n    token: TransitionsService,\n    factory: TransitionsService.ɵfac,\n    providedIn: 'root'\n  });\n  return TransitionsService;\n})();","map":null,"metadata":{},"sourceType":"module"}