{"ast":null,"code":"import * as i0 from \"@angular/core\";\nimport * as i1 from \"../../../data.service\";\nimport * as i2 from \"../../../services/transitions.service\";\nimport * as i3 from \"../../../services/academicstyle.service\";\nimport * as i4 from \"../../../services/eggcorns.service\";\nimport * as i5 from \"../../../services/grammar.service\";\nimport * as i6 from \"../../../services/nominalizations.service\";\nimport * as i7 from \"../../../services/passivevoice.service\";\nimport * as i8 from \"../../../services/wordiness.service\";\nimport * as i9 from \"../../../services/sentences.service\";\nimport * as i10 from \"@angular/common\";\nimport * as i11 from \"@angular/router\";\nimport * as i12 from \"@angular/material/toolbar\";\n\nfunction TransitionsFixComponent_tr_43_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelementStart(0, \"tr\");\n    i0.ɵɵtext(1);\n    i0.ɵɵelementEnd();\n  }\n\n  if (rf & 2) {\n    const tableData_r2 = ctx.$implicit;\n    i0.ɵɵadvance(1);\n    i0.ɵɵtextInterpolate1(\" \", tableData_r2, \" \");\n  }\n}\n\nfunction TransitionsFixComponent_tr_45_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelementStart(0, \"tr\");\n    i0.ɵɵtext(1);\n    i0.ɵɵelementEnd();\n  }\n\n  if (rf & 2) {\n    const tableData_r3 = ctx.$implicit;\n    i0.ɵɵadvance(1);\n    i0.ɵɵtextInterpolate1(\" \", tableData_r3, \" \");\n  }\n}\n\nexport let TransitionsFixComponent = /*#__PURE__*/(() => {\n  class TransitionsFixComponent {\n    constructor(data, transitions, academic, eggcorns, grammar, nominalizations, passivevoice, wordiness, sentences) {\n      this.data = data;\n      this.transitions = transitions;\n      this.academic = academic;\n      this.eggcorns = eggcorns;\n      this.grammar = grammar;\n      this.nominalizations = nominalizations;\n      this.passivevoice = passivevoice;\n      this.wordiness = wordiness;\n      this.sentences = sentences;\n      this.title = 'Tranistions-Fix'; // Transitions\n\n      this.transitionsFeedback = ' ';\n    }\n\n    startOverClick() {\n      this.data.changeMessage('');\n    } //returns the element that is displayed in the html\n\n\n    getContent() {\n      return document.getElementById('userinput').innerHTML;\n    }\n\n    reHighlight() {\n      // Reset every time you hit re-highlight\n      this.data.changeTotalSentences(0);\n      this.data.changeGrade(0);\n      this.passivevoice.changePassiveVoiceNumber(0);\n      this.wordiness.changeWordinessNumber(0);\n      this.transitions.changeTotalTransitions(0);\n      this.academic.changeTotalNonAcademic(0);\n      this.grammar.changeTotalGrammar(0);\n      this.eggcorns.changeTotalEggcorns(0);\n      this.nominalizations.changeNominalizationsNumber(0);\n      this.sentences.changeSentencesNumber(0); // Clear -- Reset\n\n      this.transitionsUserTable = {\n        find: [],\n        suggestion: []\n      }; // variables\n      // user text = paragraph from the html file\n\n      let userText = this.getContent();\n      let aLetter = false; // This function checks if there is at least one letter inputed\n\n      const validateChar = function () {\n        if (/[a-zA-Z]/.test(userText)) {\n          aLetter = true;\n        }\n      }; // calling function - checker\n\n\n      validateChar(); // alters! or proceed to overview\n\n      if (userText === '') {\n        alert('Please fill out the text area');\n      } else if (aLetter === false) {\n        alert('Please enter at least one letter');\n      } else {\n        this.data.changeMessage(userText); // Find total sentences in text\n\n        for (let i = 0; i < userText.length; i++) {\n          if (userText.charAt(i) === '.' || userText.charAt(i) === '!' || userText.charAt(i) === '?') {\n            this.data.changeTotalSentences(this.totalSentences + 1);\n          }\n        } // Fixes\n\n\n        this.transitionsFix(userText);\n      }\n    }\n\n    ngOnInit() {\n      this.data.currentMessage.subscribe(message => this.message = message);\n      this.data.currentTotalSentences.subscribe(totalSentences => this.totalSentences = totalSentences);\n      this.data.currentTotalSentences.subscribe(totalSentences => this.totalSentences = totalSentences);\n      this.data.currentGradeAlertColor.subscribe(gradeAlertColor => this.gradeAlertColor = gradeAlertColor);\n      this.data.currentGradeFeedback.subscribe(gradeFeedback => this.gradeFeedback = gradeFeedback); // Service\n\n      this.transitionsService();\n    }\n\n    transitionsFix(userText) {\n      //find transition in user text\n      for (const fix in this.transitionsTable) {\n        // changing user text to lower Case to match with transitionsTable\n        if (userText.toLocaleLowerCase().includes(fix)) {\n          this.transitions.changeTotalTransitions(this.totalTransitions + 1); // add transition in user text into an array\n\n          this.transitionsUserTable.find.push('• ' + fix + ' ⟶ ' + this.transitionsTable[fix]);\n          this.transitions.changeTransitionsUserTable(this.transitionsUserTable); // this.transitionsUserTable.suggestion.push(\" ⟶ \" + this.transitionsTable[fix]);\n\n          this.highlight(fix);\n        }\n      } //calcutale score\n\n\n      this.transitionsScore = this.totalTransitions / this.totalSentences * 100; // if (this.transitionsScore === NaN || this.transitionsScore === Infinity) {\n      //  this.transitionsScore = 0;\n      // }\n      // round to whole number\n      // this.transitions.changeTransitionsScore(Math.round(this.transitionsScore));\n      // this.transitions.changeTransitionsScore(this.transitionsScore);\n\n      if (isNaN(this.transitionsScore) || this.transitionsScore === Infinity) {\n        this.transitionsScore = 0;\n      }\n\n      try {\n        if (this.transitionsScore == 0) {\n          this.transitionsAlertColor = 'red';\n          this.transitionsFeedback = 'Your writing seems to have no transition word';\n        } else if (this.transitionsScore <= 10) {\n          this.transitionsFeedback = 'The number of transition words in your writing seems low';\n          this.transitionsAlertColor = 'orange';\n        } else if (this.transitionsScore <= 80) {\n          this.transitionsFeedback = 'Woot! Your writing seems to have a good proportion of transitions';\n          this.transitionsAlertColor = 'green';\n        } else {\n          this.transitionsFeedback = \"Woot! Your writing seems to have a lot of transitions. Make sure you're not overusing transition words\";\n          this.transitionsAlertColor = 'green';\n        }\n\n        if (this.totalSentences === 0) {\n          throw new Error('');\n        }\n      } catch (e) {\n        this.transitionsFeedback = 'Make sure you enter at least one sentence.';\n        this.transitionsAlertColor = 'orange';\n        this.transitionsScore = 0;\n      } // if (this.transitionsScore == 0) {\n      //  this.transitionsAlertColor = \"red\";\n      //  this.transitionsFeedback = \"Your writing seems to have no transition word\";\n      // } else if (this.transitionsScore <= 10) {\n      //  this.transitionsFeedback = \"The number of transition words in your writing seems low\";\n      //  this.transitionsAlertColor = \"orange\";\n      // } else if (this.transitionsScore <= 80) {\n      //  this.transitionsFeedback = \"Woot! Your writing seems to have a good proportion of transitions\";\n      //  this.transitionsAlertColor = \"green\";\n      // } else {\n      //  this.transitionsFeedback = \"Woot! Your writing seems to have a lot of transitions. Make sure you\\'re not overusing transition words\";\n      //  this.transitionsAlertColor = \"green\";\n      //}\n\n\n      this.transitions.changeTransitionsScore(Math.round(this.transitionsScore * 10) / 10);\n      this.transitions.changeTransitionsFeedback(this.transitionsFeedback);\n      this.transitions.changeTransitionsAlertColor(this.transitionsAlertColor);\n    }\n\n    transitionsService() {\n      //result color\n      this.transitions.currentTransitionsAlertColor.subscribe(transitionsAlertColor => this.transitionsAlertColor = transitionsAlertColor); //Feedback\n\n      this.transitions.currentTransitionsFeedback.subscribe(transitionsFeedback => this.transitionsFeedback = transitionsFeedback); // Total number of sentences in the user input\n      // this.transitions.currentTotalSentences.subscribe(totalSentences => this.totalSentences = totalSentences);\n      // Total number of transitions in the user input\n\n      this.transitions.currentTotalTransitions.subscribe(totalTransitions => this.totalTransitions = totalTransitions); // Transition Table of all transitions\n\n      this.transitions.currentTransitionsTable.subscribe(transitionsTable => this.transitionsTable = transitionsTable); // Transition Table of Current User Errors in Text\n\n      this.transitions.currentTransitionsUserTable.subscribe(transitionsUserTable => this.transitionsUserTable = transitionsUserTable); // Transitions score\n\n      this.transitions.currentTransitionsScore.subscribe(transitionsScore => this.transitionsScore = transitionsScore);\n    } //new hgihlight feature uses regex to replace the errors in the entire paragraph\n\n\n    highlight(text) {\n      //hold the message from the html textbox with id= userinput\n      var paragraph = document.getElementById('userinput'); //dynamic/custom regex expression -> only way to use variable inside regex\n\n      let re = new RegExp(`\\\\b${text}\\\\b`, 'gi'); //replace with -> span and highlight\n\n      paragraph.innerHTML = paragraph.innerHTML.replace(re, '<span style=\"background-color: #FF6363; padding: 0.1em, 0.2em ;font-family: Georgia;\" >' + text + ' </span>');\n    }\n\n  }\n\n  TransitionsFixComponent.ɵfac = function TransitionsFixComponent_Factory(t) {\n    return new (t || TransitionsFixComponent)(i0.ɵɵdirectiveInject(i1.DataService), i0.ɵɵdirectiveInject(i2.TransitionsService), i0.ɵɵdirectiveInject(i3.AcademicStyleService), i0.ɵɵdirectiveInject(i4.EggcornService), i0.ɵɵdirectiveInject(i5.GrammarService), i0.ɵɵdirectiveInject(i6.NominalizationsService), i0.ɵɵdirectiveInject(i7.PassivevoiceService), i0.ɵɵdirectiveInject(i8.WordinessService), i0.ɵɵdirectiveInject(i9.SentencesService));\n  };\n\n  TransitionsFixComponent.ɵcmp = /*@__PURE__*/i0.ɵɵdefineComponent({\n    type: TransitionsFixComponent,\n    selectors: [[\"app-transitions-fix\"]],\n    decls: 46,\n    vars: 9,\n    consts: [[\"color\", \"white\", 1, \"navbar\"], [\"routerLink\", \"../../overview\", 1, \"linkedpages\"], [\"routerLink\", \"../passive-voice-fix\", 1, \"linkedpages\"], [\"routerLink\", \"../wordiness-fix\", 1, \"linkedpages\"], [\"routerLink\", \"../academic-style-fix\", 1, \"linkedpages\"], [\"routerLink\", \"../grammar-fix\", 1, \"linkedpages\"], [\"routerLink\", \"../nominalizations-fix\", 1, \"linkedpages\"], [\"routerLink\", \"../sentences-fix\", 1, \"linkedpages\"], [\"routerLink\", \"../eggcorns-fix\", 1, \"linkedpages\"], [\"routerLink\", \"../transitions-fix\", 1, \"linkedpages\"], [\"routerLink\", \"\", 1, \"linkedpages\", 3, \"click\"], [1, \"alert-box\"], [1, \"box\"], [\"color\", \"white\", 1, \"category\"], [1, \"title\"], [1, \"description\"], [1, \"column1\"], [\"id\", \"userinput\", \"name\", \"userinput\"], [1, \"column2\"], [1, \"feedback\"], [4, \"ngFor\", \"ngForOf\"]],\n    template: function TransitionsFixComponent_Template(rf, ctx) {\n      if (rf & 1) {\n        i0.ɵɵelementStart(0, \"mat-toolbar\", 0)(1, \"a\", 1);\n        i0.ɵɵtext(2, \"Overview\");\n        i0.ɵɵelementEnd();\n        i0.ɵɵelementStart(3, \"a\", 2);\n        i0.ɵɵtext(4, \"Passive Voice\");\n        i0.ɵɵelementEnd();\n        i0.ɵɵelementStart(5, \"a\", 3);\n        i0.ɵɵtext(6, \"Wordiness\");\n        i0.ɵɵelementEnd();\n        i0.ɵɵelementStart(7, \"a\", 4);\n        i0.ɵɵtext(8, \"Academic Style\");\n        i0.ɵɵelementEnd();\n        i0.ɵɵelementStart(9, \"a\", 5);\n        i0.ɵɵtext(10, \"Grammar\");\n        i0.ɵɵelementEnd();\n        i0.ɵɵelementStart(11, \"a\", 6);\n        i0.ɵɵtext(12, \"Nominalizations\");\n        i0.ɵɵelementEnd();\n        i0.ɵɵelementStart(13, \"a\", 7);\n        i0.ɵɵtext(14, \"Sentences\");\n        i0.ɵɵelementEnd();\n        i0.ɵɵelementStart(15, \"a\", 8);\n        i0.ɵɵtext(16, \"Eggcorns\");\n        i0.ɵɵelementEnd();\n        i0.ɵɵelementStart(17, \"a\", 9);\n        i0.ɵɵtext(18, \"Transitions\");\n        i0.ɵɵelementEnd();\n        i0.ɵɵelementStart(19, \"a\", 10);\n        i0.ɵɵlistener(\"click\", function TransitionsFixComponent_Template_a_click_19_listener() {\n          return ctx.startOverClick();\n        });\n        i0.ɵɵtext(20, \"Start Over\");\n        i0.ɵɵelementEnd()();\n        i0.ɵɵelementStart(21, \"div\", 11)(22, \"h5\", 12);\n        i0.ɵɵtext(23);\n        i0.ɵɵelementEnd();\n        i0.ɵɵelementStart(24, \"b\", 12);\n        i0.ɵɵtext(25, \"Goal: 10% or more \");\n        i0.ɵɵelementEnd()();\n        i0.ɵɵelementStart(26, \"mat-toolbar\", 13)(27, \"mat-toolbar-row\", 14)(28, \"b\");\n        i0.ɵɵtext(29, \"Transitions\");\n        i0.ɵɵelementEnd()();\n        i0.ɵɵelementStart(30, \"mat-toolbar-row\", 15);\n        i0.ɵɵtext(31);\n        i0.ɵɵelementEnd()();\n        i0.ɵɵelementStart(32, \"div\")(33, \"div\", 16)(34, \"p\", 17);\n        i0.ɵɵtext(35);\n        i0.ɵɵelementEnd();\n        i0.ɵɵelement(36, \"br\");\n        i0.ɵɵelementEnd();\n        i0.ɵɵelementStart(37, \"div\", 18)(38, \"h1\", 19)(39, \"b\");\n        i0.ɵɵtext(40);\n        i0.ɵɵelementEnd()();\n        i0.ɵɵelementStart(41, \"table\")(42, \"td\");\n        i0.ɵɵtemplate(43, TransitionsFixComponent_tr_43_Template, 2, 1, \"tr\", 20);\n        i0.ɵɵelementEnd();\n        i0.ɵɵelementStart(44, \"td\");\n        i0.ɵɵtemplate(45, TransitionsFixComponent_tr_45_Template, 2, 1, \"tr\", 20);\n        i0.ɵɵelementEnd()()()();\n      }\n\n      if (rf & 2) {\n        i0.ɵɵadvance(21);\n        i0.ɵɵstyleProp(\"background-color\", ctx.transitionsAlertColor);\n        i0.ɵɵadvance(2);\n        i0.ɵɵtextInterpolate2(\" \", ctx.totalTransitions, \" instances (\", ctx.transitionsScore, \"% of sentences) \");\n        i0.ɵɵadvance(8);\n        i0.ɵɵtextInterpolate(ctx.transitionsFeedback);\n        i0.ɵɵadvance(4);\n        i0.ɵɵtextInterpolate(ctx.message);\n        i0.ɵɵadvance(5);\n        i0.ɵɵtextInterpolate1(\"Transitions Found - \", ctx.totalTransitions, \" instance(s)\");\n        i0.ɵɵadvance(3);\n        i0.ɵɵproperty(\"ngForOf\", ctx.transitionsUserTable.find);\n        i0.ɵɵadvance(2);\n        i0.ɵɵproperty(\"ngForOf\", ctx.transitionsUserTable.suggestion);\n      }\n    },\n    dependencies: [i10.NgForOf, i11.RouterLinkWithHref, i12.MatToolbar, i12.MatToolbarRow],\n    styles: [\".linkedpages[_ngcontent-%COMP%]{text-decoration:none;display:inline-block;border-left:black groove;border-right:black groove;width:10%;text-align:center;color:#000;font-size:16px}.navbar[_ngcontent-%COMP%]{margin:0;padding:0}.category[_ngcontent-%COMP%]{margin:20px 0;padding:10px 20px}.title[_ngcontent-%COMP%]{font-size:36px}.description[_ngcontent-%COMP%]{font-size:20px}.column1[_ngcontent-%COMP%]{float:left;width:65%;padding-left:20px}.column2[_ngcontent-%COMP%]{float:left;width:30.5%;background-color:#fff;padding:20px}#userinput[_ngcontent-%COMP%]{height:300px;min-height:100px;width:96.5%;resize:none;border-width:thick;padding:5px;font-size:14px}.rehighlight[_ngcontent-%COMP%]{display:flex;align-items:center;justify-content:center;background-color:#409e7f;color:#000;width:300px;height:50px;border-radius:14px;font-size:17px;font-weight:700;display:table-cell}.rehighlight[_ngcontent-%COMP%]:hover{background-color:#00704a;border-color:#fff;color:#fff}.feedback[_ngcontent-%COMP%]{font-size:30px}.linkedpages[_ngcontent-%COMP%]{color:#000;text-decoration:none;border-left:black groove;display:inline-block;width:135px;text-align:center}.linkedpages[_ngcontent-%COMP%]:hover{background-color:#9ca6a6;border-radius:10px;color:#fff}.alert-box[_ngcontent-%COMP%]{background-color:#e72121;min-width:300px;margin-left:850px;text-align:left;margin-bottom:-92px;padding:10px;position:relative;border-radius:10px;margin-top:20px}td[_ngcontent-%COMP%]{padding-right:10px}.box[_ngcontent-%COMP%]{font-size:20px}\"]\n  });\n  return TransitionsFixComponent;\n})();","map":null,"metadata":{},"sourceType":"module"}